{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.parse=parse;exports.serialize=serialize;/**\n * RegExp to match cookie-name in RFC 6265 sec 4.1.1\n * This refers out to the obsoleted definition of token in RFC 2616 sec 2.2\n * which has been replaced by the token definition in RFC 7230 appendix B.\n *\n * cookie-name       = token\n * token             = 1*tchar\n * tchar             = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" /\n *                     \"*\" / \"+\" / \"-\" / \".\" / \"^\" / \"_\" /\n *                     \"`\" / \"|\" / \"~\" / DIGIT / ALPHA\n *\n * Note: Allowing more characters - https://github.com/jshttp/cookie/issues/191\n * Allow same range as cookie value, except `=`, which delimits end of name.\n */const cookieNameRegExp=/^[\\u0021-\\u003A\\u003C\\u003E-\\u007E]+$/;/**\n * RegExp to match cookie-value in RFC 6265 sec 4.1.1\n *\n * cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )\n * cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n *                     ; US-ASCII characters excluding CTLs,\n *                     ; whitespace DQUOTE, comma, semicolon,\n *                     ; and backslash\n *\n * Allowing more characters: https://github.com/jshttp/cookie/issues/191\n * Comma, backslash, and DQUOTE are not part of the parsing algorithm.\n */const cookieValueRegExp=/^[\\u0021-\\u003A\\u003C-\\u007E]*$/;/**\n * RegExp to match domain-value in RFC 6265 sec 4.1.1\n *\n * domain-value      = <subdomain>\n *                     ; defined in [RFC1034], Section 3.5, as\n *                     ; enhanced by [RFC1123], Section 2.1\n * <subdomain>       = <label> | <subdomain> \".\" <label>\n * <label>           = <let-dig> [ [ <ldh-str> ] <let-dig> ]\n *                     Labels must be 63 characters or less.\n *                     'let-dig' not 'letter' in the first char, per RFC1123\n * <ldh-str>         = <let-dig-hyp> | <let-dig-hyp> <ldh-str>\n * <let-dig-hyp>     = <let-dig> | \"-\"\n * <let-dig>         = <letter> | <digit>\n * <letter>          = any one of the 52 alphabetic characters A through Z in\n *                     upper case and a through z in lower case\n * <digit>           = any one of the ten digits 0 through 9\n *\n * Keep support for leading dot: https://github.com/jshttp/cookie/issues/173\n *\n * > (Note that a leading %x2E (\".\"), if present, is ignored even though that\n * character is not permitted, but a trailing %x2E (\".\"), if present, will\n * cause the user agent to ignore the attribute.)\n */const domainValueRegExp=/^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i;/**\n * RegExp to match path-value in RFC 6265 sec 4.1.1\n *\n * path-value        = <any CHAR except CTLs or \";\">\n * CHAR              = %x01-7F\n *                     ; defined in RFC 5234 appendix B.1\n */const pathValueRegExp=/^[\\u0020-\\u003A\\u003D-\\u007E]*$/;const __toString=Object.prototype.toString;const NullObject=/* @__PURE__ */(()=>{const C=function(){};C.prototype=Object.create(null);return C;})();/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n */function parse(str,options){const obj=new NullObject();const len=str.length;// RFC 6265 sec 4.1.1, RFC 2616 2.2 defines a cookie name consists of one char minimum, plus '='.\nif(len<2)return obj;const dec=(options===null||options===void 0?void 0:options.decode)||decode;let index=0;do{const eqIdx=str.indexOf(\"=\",index);if(eqIdx===-1)break;// No more cookie pairs.\nconst colonIdx=str.indexOf(\";\",index);const endIdx=colonIdx===-1?len:colonIdx;if(eqIdx>endIdx){// backtrack on prior semicolon\nindex=str.lastIndexOf(\";\",eqIdx-1)+1;continue;}const keyStartIdx=startIndex(str,index,eqIdx);const keyEndIdx=endIndex(str,eqIdx,keyStartIdx);const key=str.slice(keyStartIdx,keyEndIdx);// only assign once\nif(obj[key]===undefined){let valStartIdx=startIndex(str,eqIdx+1,endIdx);let valEndIdx=endIndex(str,endIdx,valStartIdx);const value=dec(str.slice(valStartIdx,valEndIdx));obj[key]=value;}index=endIdx+1;}while(index<len);return obj;}function startIndex(str,index,max){do{const code=str.charCodeAt(index);if(code!==0x20/*   */&&code!==0x09/* \\t */)return index;}while(++index<max);return max;}function endIndex(str,index,min){while(index>min){const code=str.charCodeAt(--index);if(code!==0x20/*   */&&code!==0x09/* \\t */)return index+1;}return min;}/**\n * Serialize data into a cookie header.\n *\n * Serialize a name value pair into a cookie string suitable for\n * http headers. An optional options object specifies cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n */function serialize(name,val,options){const enc=(options===null||options===void 0?void 0:options.encode)||encodeURIComponent;if(!cookieNameRegExp.test(name)){throw new TypeError(\"argument name is invalid: \".concat(name));}const value=enc(val);if(!cookieValueRegExp.test(value)){throw new TypeError(\"argument val is invalid: \".concat(val));}let str=name+\"=\"+value;if(!options)return str;if(options.maxAge!==undefined){if(!Number.isInteger(options.maxAge)){throw new TypeError(\"option maxAge is invalid: \".concat(options.maxAge));}str+=\"; Max-Age=\"+options.maxAge;}if(options.domain){if(!domainValueRegExp.test(options.domain)){throw new TypeError(\"option domain is invalid: \".concat(options.domain));}str+=\"; Domain=\"+options.domain;}if(options.path){if(!pathValueRegExp.test(options.path)){throw new TypeError(\"option path is invalid: \".concat(options.path));}str+=\"; Path=\"+options.path;}if(options.expires){if(!isDate(options.expires)||!Number.isFinite(options.expires.valueOf())){throw new TypeError(\"option expires is invalid: \".concat(options.expires));}str+=\"; Expires=\"+options.expires.toUTCString();}if(options.httpOnly){str+=\"; HttpOnly\";}if(options.secure){str+=\"; Secure\";}if(options.partitioned){str+=\"; Partitioned\";}if(options.priority){const priority=typeof options.priority===\"string\"?options.priority.toLowerCase():undefined;switch(priority){case\"low\":str+=\"; Priority=Low\";break;case\"medium\":str+=\"; Priority=Medium\";break;case\"high\":str+=\"; Priority=High\";break;default:throw new TypeError(\"option priority is invalid: \".concat(options.priority));}}if(options.sameSite){const sameSite=typeof options.sameSite===\"string\"?options.sameSite.toLowerCase():options.sameSite;switch(sameSite){case true:case\"strict\":str+=\"; SameSite=Strict\";break;case\"lax\":str+=\"; SameSite=Lax\";break;case\"none\":str+=\"; SameSite=None\";break;default:throw new TypeError(\"option sameSite is invalid: \".concat(options.sameSite));}}return str;}/**\n * URL-decode string value. Optimized to skip native call when no %.\n */function decode(str){if(str.indexOf(\"%\")===-1)return str;try{return decodeURIComponent(str);}catch(e){return str;}}/**\n * Determine if value is a Date.\n */function isDate(val){return __toString.call(val)===\"[object Date]\";}","map":{"version":3,"names":["exports","parse","serialize","cookieNameRegExp","cookieValueRegExp","domainValueRegExp","pathValueRegExp","__toString","Object","prototype","toString","NullObject","C","create","str","options","obj","len","length","dec","decode","index","eqIdx","indexOf","colonIdx","endIdx","lastIndexOf","keyStartIdx","startIndex","keyEndIdx","endIndex","key","slice","undefined","valStartIdx","valEndIdx","value","max","code","charCodeAt","min","name","val","enc","encode","encodeURIComponent","test","TypeError","concat","maxAge","Number","isInteger","domain","path","expires","isDate","isFinite","valueOf","toUTCString","httpOnly","secure","partitioned","priority","toLowerCase","sameSite","decodeURIComponent","e","call"],"sources":["C:\\website_tennis\\frontend\\src\\node_modules\\cookie\\src\\index.ts"],"sourcesContent":["/**\n * RegExp to match cookie-name in RFC 6265 sec 4.1.1\n * This refers out to the obsoleted definition of token in RFC 2616 sec 2.2\n * which has been replaced by the token definition in RFC 7230 appendix B.\n *\n * cookie-name       = token\n * token             = 1*tchar\n * tchar             = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" /\n *                     \"*\" / \"+\" / \"-\" / \".\" / \"^\" / \"_\" /\n *                     \"`\" / \"|\" / \"~\" / DIGIT / ALPHA\n *\n * Note: Allowing more characters - https://github.com/jshttp/cookie/issues/191\n * Allow same range as cookie value, except `=`, which delimits end of name.\n */\nconst cookieNameRegExp = /^[\\u0021-\\u003A\\u003C\\u003E-\\u007E]+$/;\n\n/**\n * RegExp to match cookie-value in RFC 6265 sec 4.1.1\n *\n * cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )\n * cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n *                     ; US-ASCII characters excluding CTLs,\n *                     ; whitespace DQUOTE, comma, semicolon,\n *                     ; and backslash\n *\n * Allowing more characters: https://github.com/jshttp/cookie/issues/191\n * Comma, backslash, and DQUOTE are not part of the parsing algorithm.\n */\nconst cookieValueRegExp = /^[\\u0021-\\u003A\\u003C-\\u007E]*$/;\n\n/**\n * RegExp to match domain-value in RFC 6265 sec 4.1.1\n *\n * domain-value      = <subdomain>\n *                     ; defined in [RFC1034], Section 3.5, as\n *                     ; enhanced by [RFC1123], Section 2.1\n * <subdomain>       = <label> | <subdomain> \".\" <label>\n * <label>           = <let-dig> [ [ <ldh-str> ] <let-dig> ]\n *                     Labels must be 63 characters or less.\n *                     'let-dig' not 'letter' in the first char, per RFC1123\n * <ldh-str>         = <let-dig-hyp> | <let-dig-hyp> <ldh-str>\n * <let-dig-hyp>     = <let-dig> | \"-\"\n * <let-dig>         = <letter> | <digit>\n * <letter>          = any one of the 52 alphabetic characters A through Z in\n *                     upper case and a through z in lower case\n * <digit>           = any one of the ten digits 0 through 9\n *\n * Keep support for leading dot: https://github.com/jshttp/cookie/issues/173\n *\n * > (Note that a leading %x2E (\".\"), if present, is ignored even though that\n * character is not permitted, but a trailing %x2E (\".\"), if present, will\n * cause the user agent to ignore the attribute.)\n */\nconst domainValueRegExp =\n  /^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i;\n\n/**\n * RegExp to match path-value in RFC 6265 sec 4.1.1\n *\n * path-value        = <any CHAR except CTLs or \";\">\n * CHAR              = %x01-7F\n *                     ; defined in RFC 5234 appendix B.1\n */\nconst pathValueRegExp = /^[\\u0020-\\u003A\\u003D-\\u007E]*$/;\n\nconst __toString = Object.prototype.toString;\n\nconst NullObject = /* @__PURE__ */ (() => {\n  const C = function () {};\n  C.prototype = Object.create(null);\n  return C;\n})() as unknown as { new (): any };\n\n/**\n * Parse options.\n */\nexport interface ParseOptions {\n  /**\n   * Specifies a function that will be used to decode a [cookie-value](https://datatracker.ietf.org/doc/html/rfc6265#section-4.1.1).\n   * Since the value of a cookie has a limited character set (and must be a simple string), this function can be used to decode\n   * a previously-encoded cookie value into a JavaScript string.\n   *\n   * The default function is the global `decodeURIComponent`, wrapped in a `try..catch`. If an error\n   * is thrown it will return the cookie's original value. If you provide your own encode/decode\n   * scheme you must ensure errors are appropriately handled.\n   *\n   * @default decode\n   */\n  decode?: (str: string) => string | undefined;\n}\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n */\nexport function parse(\n  str: string,\n  options?: ParseOptions,\n): Record<string, string | undefined> {\n  const obj: Record<string, string | undefined> = new NullObject();\n  const len = str.length;\n  // RFC 6265 sec 4.1.1, RFC 2616 2.2 defines a cookie name consists of one char minimum, plus '='.\n  if (len < 2) return obj;\n\n  const dec = options?.decode || decode;\n  let index = 0;\n\n  do {\n    const eqIdx = str.indexOf(\"=\", index);\n    if (eqIdx === -1) break; // No more cookie pairs.\n\n    const colonIdx = str.indexOf(\";\", index);\n    const endIdx = colonIdx === -1 ? len : colonIdx;\n\n    if (eqIdx > endIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(\";\", eqIdx - 1) + 1;\n      continue;\n    }\n\n    const keyStartIdx = startIndex(str, index, eqIdx);\n    const keyEndIdx = endIndex(str, eqIdx, keyStartIdx);\n    const key = str.slice(keyStartIdx, keyEndIdx);\n\n    // only assign once\n    if (obj[key] === undefined) {\n      let valStartIdx = startIndex(str, eqIdx + 1, endIdx);\n      let valEndIdx = endIndex(str, endIdx, valStartIdx);\n\n      const value = dec(str.slice(valStartIdx, valEndIdx));\n      obj[key] = value;\n    }\n\n    index = endIdx + 1;\n  } while (index < len);\n\n  return obj;\n}\n\nfunction startIndex(str: string, index: number, max: number) {\n  do {\n    const code = str.charCodeAt(index);\n    if (code !== 0x20 /*   */ && code !== 0x09 /* \\t */) return index;\n  } while (++index < max);\n  return max;\n}\n\nfunction endIndex(str: string, index: number, min: number) {\n  while (index > min) {\n    const code = str.charCodeAt(--index);\n    if (code !== 0x20 /*   */ && code !== 0x09 /* \\t */) return index + 1;\n  }\n  return min;\n}\n\n/**\n * Serialize options.\n */\nexport interface SerializeOptions {\n  /**\n   * Specifies a function that will be used to encode a [cookie-value](https://datatracker.ietf.org/doc/html/rfc6265#section-4.1.1).\n   * Since value of a cookie has a limited character set (and must be a simple string), this function can be used to encode\n   * a value into a string suited for a cookie's value, and should mirror `decode` when parsing.\n   *\n   * @default encodeURIComponent\n   */\n  encode?: (str: string) => string;\n  /**\n   * Specifies the `number` (in seconds) to be the value for the [`Max-Age` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.2).\n   *\n   * The [cookie storage model specification](https://tools.ietf.org/html/rfc6265#section-5.3) states that if both `expires` and\n   * `maxAge` are set, then `maxAge` takes precedence, but it is possible not all clients by obey this,\n   * so if both are set, they should point to the same date and time.\n   */\n  maxAge?: number;\n  /**\n   * Specifies the `Date` object to be the value for the [`Expires` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.1).\n   * When no expiration is set clients consider this a \"non-persistent cookie\" and delete it the current session is over.\n   *\n   * The [cookie storage model specification](https://tools.ietf.org/html/rfc6265#section-5.3) states that if both `expires` and\n   * `maxAge` are set, then `maxAge` takes precedence, but it is possible not all clients by obey this,\n   * so if both are set, they should point to the same date and time.\n   */\n  expires?: Date;\n  /**\n   * Specifies the value for the [`Domain` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.3).\n   * When no domain is set clients consider the cookie to apply to the current domain only.\n   */\n  domain?: string;\n  /**\n   * Specifies the value for the [`Path` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.4).\n   * When no path is set, the path is considered the [\"default path\"](https://tools.ietf.org/html/rfc6265#section-5.1.4).\n   */\n  path?: string;\n  /**\n   * Enables the [`HttpOnly` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.6).\n   * When enabled, clients will not allow client-side JavaScript to see the cookie in `document.cookie`.\n   */\n  httpOnly?: boolean;\n  /**\n   * Enables the [`Secure` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.5).\n   * When enabled, clients will only send the cookie back if the browser has a HTTPS connection.\n   */\n  secure?: boolean;\n  /**\n   * Enables the [`Partitioned` `Set-Cookie` attribute](https://tools.ietf.org/html/draft-cutler-httpbis-partitioned-cookies/).\n   * When enabled, clients will only send the cookie back when the current domain _and_ top-level domain matches.\n   *\n   * This is an attribute that has not yet been fully standardized, and may change in the future.\n   * This also means clients may ignore this attribute until they understand it. More information\n   * about can be found in [the proposal](https://github.com/privacycg/CHIPS).\n   */\n  partitioned?: boolean;\n  /**\n   * Specifies the value for the [`Priority` `Set-Cookie` attribute](https://tools.ietf.org/html/draft-west-cookie-priority-00#section-4.1).\n   *\n   * - `'low'` will set the `Priority` attribute to `Low`.\n   * - `'medium'` will set the `Priority` attribute to `Medium`, the default priority when not set.\n   * - `'high'` will set the `Priority` attribute to `High`.\n   *\n   * More information about priority levels can be found in [the specification](https://tools.ietf.org/html/draft-west-cookie-priority-00#section-4.1).\n   */\n  priority?: \"low\" | \"medium\" | \"high\";\n  /**\n   * Specifies the value for the [`SameSite` `Set-Cookie` attribute](https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-09#section-5.4.7).\n   *\n   * - `true` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\n   * - `'lax'` will set the `SameSite` attribute to `Lax` for lax same site enforcement.\n   * - `'none'` will set the `SameSite` attribute to `None` for an explicit cross-site cookie.\n   * - `'strict'` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\n   *\n   * More information about enforcement levels can be found in [the specification](https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-09#section-5.4.7).\n   */\n  sameSite?: boolean | \"lax\" | \"strict\" | \"none\";\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize a name value pair into a cookie string suitable for\n * http headers. An optional options object specifies cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n */\nexport function serialize(\n  name: string,\n  val: string,\n  options?: SerializeOptions,\n): string {\n  const enc = options?.encode || encodeURIComponent;\n\n  if (!cookieNameRegExp.test(name)) {\n    throw new TypeError(`argument name is invalid: ${name}`);\n  }\n\n  const value = enc(val);\n\n  if (!cookieValueRegExp.test(value)) {\n    throw new TypeError(`argument val is invalid: ${val}`);\n  }\n\n  let str = name + \"=\" + value;\n  if (!options) return str;\n\n  if (options.maxAge !== undefined) {\n    if (!Number.isInteger(options.maxAge)) {\n      throw new TypeError(`option maxAge is invalid: ${options.maxAge}`);\n    }\n\n    str += \"; Max-Age=\" + options.maxAge;\n  }\n\n  if (options.domain) {\n    if (!domainValueRegExp.test(options.domain)) {\n      throw new TypeError(`option domain is invalid: ${options.domain}`);\n    }\n\n    str += \"; Domain=\" + options.domain;\n  }\n\n  if (options.path) {\n    if (!pathValueRegExp.test(options.path)) {\n      throw new TypeError(`option path is invalid: ${options.path}`);\n    }\n\n    str += \"; Path=\" + options.path;\n  }\n\n  if (options.expires) {\n    if (\n      !isDate(options.expires) ||\n      !Number.isFinite(options.expires.valueOf())\n    ) {\n      throw new TypeError(`option expires is invalid: ${options.expires}`);\n    }\n\n    str += \"; Expires=\" + options.expires.toUTCString();\n  }\n\n  if (options.httpOnly) {\n    str += \"; HttpOnly\";\n  }\n\n  if (options.secure) {\n    str += \"; Secure\";\n  }\n\n  if (options.partitioned) {\n    str += \"; Partitioned\";\n  }\n\n  if (options.priority) {\n    const priority =\n      typeof options.priority === \"string\"\n        ? options.priority.toLowerCase()\n        : undefined;\n    switch (priority) {\n      case \"low\":\n        str += \"; Priority=Low\";\n        break;\n      case \"medium\":\n        str += \"; Priority=Medium\";\n        break;\n      case \"high\":\n        str += \"; Priority=High\";\n        break;\n      default:\n        throw new TypeError(`option priority is invalid: ${options.priority}`);\n    }\n  }\n\n  if (options.sameSite) {\n    const sameSite =\n      typeof options.sameSite === \"string\"\n        ? options.sameSite.toLowerCase()\n        : options.sameSite;\n    switch (sameSite) {\n      case true:\n      case \"strict\":\n        str += \"; SameSite=Strict\";\n        break;\n      case \"lax\":\n        str += \"; SameSite=Lax\";\n        break;\n      case \"none\":\n        str += \"; SameSite=None\";\n        break;\n      default:\n        throw new TypeError(`option sameSite is invalid: ${options.sameSite}`);\n    }\n  }\n\n  return str;\n}\n\n/**\n * URL-decode string value. Optimized to skip native call when no %.\n */\nfunction decode(str: string): string {\n  if (str.indexOf(\"%\") === -1) return str;\n\n  try {\n    return decodeURIComponent(str);\n  } catch (e) {\n    return str;\n  }\n}\n\n/**\n * Determine if value is a Date.\n */\nfunction isDate(val: any): val is Date {\n  return __toString.call(val) === \"[object Date]\";\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}